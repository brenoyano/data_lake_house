services:
  postgres:
    build: postgres/.
    environment:
      POSTGRES_DB: metastore_db
      POSTGRES_USER: hive
      POSTGRES_PASSWORD: postgres
      PGDATA: /data/postgres
    volumes:
      - ./postgres/volume/pgdata/:/data/postgres
      - postgres-volume:/data/postgres
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend
  # hiveserver2:
  #   platform: "linux/amd64"
  #   tty: true
  #   stdin_open: true
  #   user: root
  #   build: hive/.
  #   env_file:
  #     - ./hive/dependencies/hadoop-hive.env
  #   ports:
  #     - "10000:10000"
  #     - "10002:10002"
  #   volumes:
  #     - ./hive/volume/warehouse/:/opt/hive/data/warehouse
  #     - warehouse-volume:/opt/hive/data/warehouse
  #     - postgres-volume:/data/postgres
  #   networks:
  #     - backend
  jupyter:
    build: .
    command: /bin/bash -c "cd ../../datalake && start.sh jupyter lab --ip=* --LabApp.token='' --browser=False --allow_remote_access=true --port=8888 --allow-root --ServerApp.disable_check_xsrf=True"
    ports:
      - "8888:8888"
    networks:
      - backend
    volumes:
      - ../datalake/:/datalake
      - warehouse-volume:/opt/hive/data/warehouse
      - postgres-volume:/data/postgres
    links:
      # - hiveserver2
      - postgres
  hue:
    build: hue/.
    command: /bin/bash -c "./startup.sh"
    ports:
      - "9999:8000"
    networks:
      - backend
    depends_on:
      postgres:
       condition: service_healthy
      jupyter:
       condition: service_started
    links:
      - postgres

volumes:
     warehouse-volume:
     postgres-volume:

networks:
  backend:
    driver: "bridge"